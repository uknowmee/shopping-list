@page "/ShoppingLists/Items"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Shopping.List.App.Blazor.Database.Auth
@using Shopping.List.App.Blazor.Database.ShoppingList

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Items> Logger
@inject ShoppingListCtx Ctx

<PageTitle>AddItems</PageTitle>

@if (ItemList?.IsRealized ?? false)
{
    <h3>List is already realized.</h3> 
}
else
{
    <h3>Add Items to @(ItemList?.Name).</h3> 
}

<div class="controlNav">
    <div>
        <button class="btn btn-primary" @onclick="BackToLists">Back</button>
    </div>
    @if (ItemList?.IsRealized is false)
    {
        <div>
            <button class="btn btn-primary" @onclick="AddNewItem">New</button>
        </div>
    }
</div>

<div class="items-container">
    @foreach (var item in ItemListItems ?? [])
    {
        <div class="item-card @(ShouldLock(item) ? "table-secondary" : "")">
            <Card>
                <BodyTemplate>
                    <div class="img">
                        <img src="@(item.Picture?.PicturePath ?? "https://www.pngkey.com/png/detail/233-2332677_image-500580-placeholder-transparent.png")" alt="Item Picture" width="100" height="100"/>
                    </div>
                    <div>
                        <label>Category:</label>
                        <Select TValue="string" Color="Color.Primary" Items="UserCategories" IsDisabled="@ShouldLock(item)" IsEditable="true" Value="item.Category" OnValueChanged="@(val => CategoryChanged(val, item))"></Select>
                    </div>
                    <div>
                        <label>Size:</label>
                        <Select TValue="string" Color="Color.Primary" Items="UserSizes" IsDisabled="@ShouldLock(item)" IsEditable="true" Value="item.Size" OnValueChanged="@(val => SizeChanged(val, item))"></Select>
                    </div>
                    <div>
                        <label>Picture:</label>
                        <Select TValue="ItemPicture" Color="Color.Primary" Items="UserPictures" IsDisabled="@ShouldLock(item)" IsEditable="false" Value="item.Picture" OnValueChanged="@(val => PictureChanged(val, item))"></Select>
                    </div>
                    <div class="itm-bottom">
                        <div class="bought-toggle">
                            <button class="btn btn-success" @onclick="() => MarkAsBought(item)" disabled="@ShouldLock(item)">Bought</button>
                        </div>
                        <div class="delete">
                            <button class="btn btn-danger" @onclick="() => DeleteItem(item)" disabled="@ShouldLock(item)">Delete</button>
                        </div>
                        <div class="quantity">
                            <label>Quantity:</label>
                            <BootstrapInputNumber TValue="int" Min="1" Value="@item.Quantity" IsSelectAllTextOnFocus="true" IsDisabled="@ShouldLock(item)" OnValueChanged="@(val => QuantityChanged(val, item))"/>
                        </div>
                    </div>
                </BodyTemplate>
            </Card>
        </div>
    }
</div>

@code {
    [CascadingParameter] public Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    [SupplyParameterFromQuery(Name = "Id")]
    private Guid? ListId { get; set; }

    private const string HomeUri = "/ShoppingLists/Home";
    private ShoppingUser? _user;
    private ItemList? ItemList => _user?.Lists.SingleOrDefault(l => l.Id == ListId);
    private IEnumerable<Item>? ItemListItems => ItemList?.Items.OrderBy(i => i.IsBought).ThenByDescending(i => i.CreationDate);

    private IEnumerable<SelectedItem<ItemPicture>> UserPictures
        => _user is not null
            ? _user.Pictures
                .Select(p => new SelectedItem<ItemPicture> { Value = p, Text = p.PictureName })
                .Append(new SelectedItem<ItemPicture> { Value = null, Text = "No Picture" })
                .ToList()
            : [];

    private IEnumerable<SelectedItem> UserCategories
        => _user is not null
            ? _user.Lists
                .SelectMany(l => l.Items)
                .Select(i => i.Category)
                .Distinct()
                .Select(c => new SelectedItem { Value = c, Text = c })
                .ToList()
            : [];

    private IEnumerable<SelectedItem> UserSizes
        => _user is not null
            ? _user.Lists
                .SelectMany(l => l.Items)
                .Select(i => i.Size)
                .Distinct()
                .Select(s => new SelectedItem { Value = s, Text = s })
                .ToList()
            : [];

    private bool ShouldLock(Item item) => item.IsBought || (ItemList?.IsRealized ?? false);

    protected override async Task OnInitializedAsync()
    {
        if (ListId is null)
        {
            Logger.LogWarning("List Id not provided");
            BackToLists();
            return;
        }

        var authState = await AuthenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User) ?? throw new InvalidOperationException("User not found");

        if (await Ctx.Lists
                .AsNoTracking()
                .AnyAsync(l => l.Id == ListId && l.UserId == user.Id) is false)
        {
            Logger.LogWarning("List not found");
            BackToLists();
        }

        _user = await Ctx.Users
            .Include(u => u.Pictures)
            .Include(u => u.Lists)
            .ThenInclude(l => l.Items)
            .ThenInclude(i => i.Picture)
            .SingleAsync(u => u.Id == user.Id);
    }

    private void BackToLists() => NavigationManager.NavigateTo(HomeUri);

    private async Task AddNewItem()
    {
        if (ItemList is null) return;
        if (ItemList.IsRealized) return;
        var item = ItemList.AddItemAtFront();
        await Ctx.AddAsync(item);
        await Ctx.SaveChangesAsync();
    }

    private async Task DeleteItem(Item item)
    {
        if (ItemList is null) return;
        ItemList.Items.Remove(item);
        Ctx.Remove(item);
        await Ctx.SaveChangesAsync();
    }

    private async Task QuantityChanged(int val, Item item)
    {
        item.Quantity = val;
        await Ctx.SaveChangesAsync();
    }

    private async Task PictureChanged(ItemPicture? val, Item item)
    {
        if (val is null) return;
        item.Picture = val;
        await Ctx.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task CategoryChanged(string? val, Item item)
    {
        if (val is null) return;
        item.Category = val;
        await Ctx.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task SizeChanged(string? val, Item item)
    {
        if (val is null) return;
        item.Size = val;
        await Ctx.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task MarkAsBought(Item item)
    {
        item.IsBought = !item.IsBought;
        await Ctx.SaveChangesAsync();
        StateHasChanged();
    }

}